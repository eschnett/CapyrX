#!/bin/python

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt

# MPL settings.
mpl.rcParams['mathtext.fontset'] = 'cm'
mpl.rcParams['font.family'] = 'Latin Modern Roman'

# Datafile vars, for pandas
vars_vcoords = [
    "iteration",
    "time",
    "patch",
    "level",
    "component",
    "i",
    "j",
    "k",
    "x",
    "y",
    "z",
    "vcoordx",
    "vcoordy",
    "vcoordz"
]

vars_state = [
    "iteration",
    "time",
    "patch",
    "level",
    "component",
    "i",
    "j",
    "k",
    "x",
    "y",
    "z",
    "u_rhs",
    "rho_rhs"
    # "u",
    # "rho"
]

# Files and data
coord_file = "gaussian/coordinates-vertex_coords.it000000.p0000.tsv"
# state_file = "gaussian/multipatchwavetoy-state.it000000.p0000.tsv"
state_file = "gaussian/multipatchwavetoy-rhs.it000000.p0000.tsv"

coord_data = pd.read_csv(coord_file, delim_whitespace=True,
                         names=vars_vcoords, comment="#")
state_data = pd.read_csv(state_file, delim_whitespace=True,
                         names=vars_state, comment="#")

# Finds global coordinates from local coordinates + patch index and adds them to temporary array.
# We use temporaries because pandas documentation says "You should never modify something you are iterating over."
vcoordx_data = [0.0] * len(state_data.index)
vcoordy_data = [0.0] * len(state_data.index)
vcoordz_data = [0.0] * len(state_data.index)

for i, row in state_data.iterrows():
    global_coords_df = coord_data.loc[
        (coord_data["patch"] == row["patch"]) &
        (coord_data["x"] == row["x"]) &
        (coord_data["y"] == row["y"]) &
        (coord_data["z"] == row["z"])
    ]
    vcoordx_data[i] = float(global_coords_df["vcoordx"])
    vcoordy_data[i] = float(global_coords_df["vcoordy"])
    vcoordz_data[i] = float(global_coords_df["vcoordz"])

# Add columns for global coordinates in state data
state_data.insert(11, "vcoordx", vcoordx_data)
state_data.insert(12, "vcoordy", vcoordy_data)
state_data.insert(13, "vcoordz", vcoordz_data)

# Z slice data
sliced_data = state_data.loc[
    (state_data["vcoordz"] == 0.0)
    # & (state_data["patch"] == 0)
]

# Plots
plt.tricontourf(
    sliced_data["vcoordx"],
    sliced_data["vcoordy"],
    sliced_data["rho_rhs"],
    levels=100
)
plt.colorbar()
plt.tight_layout()
plt.show()
